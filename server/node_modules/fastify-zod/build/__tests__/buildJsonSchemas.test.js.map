{"version":3,"file":"buildJsonSchemas.test.js","names":["helpers","target","$schema","constOrEnum","value","enum","stringEnum","values","anyOf","map","type","const","describe","undefined","test","models","ZString","z","string","ZStringMin","min","ZDate","date","ZLiteral","literal","ZUuid","uuid","schemas","$ref","buildJsonSchemas","expect","toEqual","$id","properties","minLength","format","required","additionalProperties","NativeEnum","schema","ZEnum","ZNativeEnum","nativeEnum","ZObject","object","name","age","number","optional","ZObjectPartial","partial","ZArray","array","ZArrayMinMax","max","items","minItems","maxItems","ZTuple","tuple","ZUnion","union","ZRecord","record","ZIntersection","intersection","allOf","minimum","maximum","TodoItem","itemId","label","state","dueDate","TodoList","TodoItemState","id"],"sources":["../../src/__tests__/buildJsonSchemas.test.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport { buildJsonSchemas } from \"..\";\ntype Helpers = {\n  $schema: Record<string, unknown>;\n  constOrEnum: (value: unknown) => Record<string, unknown>;\n  stringEnum: (values: unknown[]) => Record<string, unknown>;\n  target?: `jsonSchema7` | `openApi3`;\n};\n\nexport const helpers = (\n  target: `jsonSchema7` | `openApi3` | undefined,\n): Helpers => {\n  if (target === `openApi3`) {\n    return {\n      $schema: {},\n      constOrEnum: (value) => ({\n        enum: [value],\n      }),\n      stringEnum: (values) => ({\n        anyOf: values.map((value) => ({\n          type: `string`,\n          enum: [value],\n        })),\n      }),\n      target,\n    };\n  }\n  if (target === `jsonSchema7`) {\n    return {\n      $schema: { $schema: `http://json-schema.org/draft-07/schema#` },\n      constOrEnum: (value) => ({ const: value }),\n      stringEnum: (values) => ({\n        type: `string`,\n        enum: values,\n      }),\n      target,\n    };\n  }\n  return helpers(`jsonSchema7`);\n};\n\ndescribe(`buildJsonSchemas`, () => {\n  for (const target of [`jsonSchema7`, `openApi3`, undefined] as const) {\n    const { $schema, constOrEnum, stringEnum } = helpers(target);\n    describe(`target: ${target ?? `none`}`, () => {\n      test(`primitives`, () => {\n        const models = {\n          ZString: z.string(),\n          ZStringMin: z.string().min(42),\n          ZDate: z.date(),\n          ZLiteral: z.literal(42),\n          ZUuid: z.string().uuid(),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, {\n          target,\n        });\n\n        expect($ref(`ZString`)).toEqual({ $ref: `Schema#/properties/ZString` });\n\n        expect($ref(`ZStringMin`)).toEqual({\n          $ref: `Schema#/properties/ZStringMin`,\n        });\n\n        expect($ref(`ZDate`)).toEqual({ $ref: `Schema#/properties/ZDate` });\n\n        expect($ref(`ZLiteral`)).toEqual({\n          $ref: `Schema#/properties/ZLiteral`,\n        });\n\n        expect($ref(`ZUuid`)).toEqual({ $ref: `Schema#/properties/ZUuid` });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZString: {\n                type: `string`,\n              },\n              ZStringMin: {\n                type: `string`,\n                minLength: 42,\n              },\n              ZDate: {\n                type: `string`,\n                format: `date-time`,\n              },\n              ZLiteral: {\n                type: `number`,\n                ...constOrEnum(42),\n              },\n              ZUuid: {\n                type: `string`,\n                format: `uuid`,\n              },\n            },\n            required: [`ZString`, `ZStringMin`, `ZDate`, `ZLiteral`, `ZUuid`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`enums`, () => {\n        enum NativeEnum {\n          One = `one`,\n          Two = `two`,\n          Three = `three`,\n        }\n\n        const schema = {\n          ZEnum: z.enum([`one`, `two`, `three`]),\n          ZNativeEnum: z.nativeEnum(NativeEnum),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(schema, {\n          target,\n        });\n\n        expect($ref(`ZEnum`)).toEqual({ $ref: `Schema#/properties/ZEnum` });\n\n        expect($ref(`ZNativeEnum`)).toEqual({\n          $ref: `Schema#/properties/ZNativeEnum`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZEnum: {\n                type: `string`,\n                enum: [`one`, `two`, `three`],\n              },\n              ZNativeEnum: {\n                type: `string`,\n                enum: [`one`, `two`, `three`],\n              },\n            },\n            required: [`ZEnum`, `ZNativeEnum`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`objects`, () => {\n        const models = {\n          ZObject: z.object({\n            name: z.string(),\n            age: z.number(),\n            uuid: z.string().uuid().optional(),\n          }),\n          ZObjectPartial: z\n            .object({\n              name: z.string(),\n              age: z.number(),\n              uuid: z.string().uuid().optional(),\n            })\n            .partial(),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZObject`)).toEqual({ $ref: `Schema#/properties/ZObject` });\n\n        expect($ref(`ZObjectPartial`)).toEqual({\n          $ref: `Schema#/properties/ZObjectPartial`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZObject: {\n                type: `object`,\n                properties: {\n                  name: {\n                    type: `string`,\n                  },\n                  age: {\n                    type: `number`,\n                  },\n                  uuid: {\n                    type: `string`,\n                    format: `uuid`,\n                  },\n                },\n                required: [`name`, `age`],\n                additionalProperties: false,\n              },\n              ZObjectPartial: {\n                type: `object`,\n                properties: {\n                  name: {\n                    type: `string`,\n                  },\n                  age: {\n                    type: `number`,\n                  },\n                  uuid: {\n                    type: `string`,\n                    format: `uuid`,\n                  },\n                },\n                additionalProperties: false,\n              },\n            },\n            required: [`ZObject`, `ZObjectPartial`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`arrays`, () => {\n        const models = {\n          ZArray: z.array(z.string()),\n          ZArrayMinMax: z.array(z.string()).min(5).max(12),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZArray`)).toEqual({ $ref: `Schema#/properties/ZArray` });\n\n        expect($ref(`ZArrayMinMax`)).toEqual({\n          $ref: `Schema#/properties/ZArrayMinMax`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZArray: {\n                type: `array`,\n                items: {\n                  type: `string`,\n                },\n              },\n              ZArrayMinMax: {\n                type: `array`,\n                items: {\n                  type: `string`,\n                },\n                minItems: 5,\n                maxItems: 12,\n              },\n            },\n            required: [`ZArray`, `ZArrayMinMax`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`tuples`, () => {\n        const models = {\n          ZTuple: z.tuple([z.string(), z.number(), z.literal(42)]),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZTuple`)).toEqual({ $ref: `Schema#/properties/ZTuple` });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZTuple: {\n                type: `array`,\n                minItems: 3,\n                maxItems: 3,\n                items: [\n                  {\n                    type: `string`,\n                  },\n                  {\n                    type: `number`,\n                  },\n                  {\n                    type: `number`,\n                    ...constOrEnum(42),\n                  },\n                ],\n              },\n            },\n            required: [`ZTuple`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`unions`, () => {\n        const models = {\n          ZUnion: z.union([z.string(), z.number(), z.literal(42)]),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZUnion`)).toEqual({ $ref: `Schema#/properties/ZUnion` });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZUnion: {\n                anyOf: [\n                  {\n                    type: `string`,\n                  },\n                  {\n                    type: `number`,\n                  },\n                  {\n                    type: `number`,\n                    ...constOrEnum(42),\n                  },\n                ],\n              },\n            },\n            required: [`ZUnion`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`records`, () => {\n        const models = {\n          ZRecord: z.record(z.number()),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZRecord`)).toEqual({ $ref: `Schema#/properties/ZRecord` });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZRecord: {\n                type: `object`,\n                additionalProperties: { type: `number` },\n              },\n            },\n            required: [`ZRecord`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`intersections`, () => {\n        const models = {\n          ZIntersection: z.intersection(z.number().min(2), z.number().max(12)),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZIntersection`)).toEqual({\n          $ref: `Schema#/properties/ZIntersection`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZIntersection: {\n                allOf: [\n                  { type: `number`, minimum: 2 },\n                  { type: `number`, maximum: 12 },\n                ],\n              },\n            },\n            required: [`ZIntersection`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`composite`, () => {\n        const TodoItem = z.object({\n          itemId: z.number(),\n          label: z.string(),\n          state: z.union([\n            z.literal(`todo`),\n            z.literal(`in progress`),\n            z.literal(`done`),\n          ]),\n          dueDate: z.string().optional(),\n        });\n\n        const TodoList = z.array(TodoItem);\n\n        const models = {\n          TodoList,\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`TodoList`)).toEqual({\n          $ref: `Schema#/properties/TodoList`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              TodoList: {\n                type: `array`,\n                items: {\n                  type: `object`,\n                  properties: {\n                    itemId: { type: `number` },\n                    label: { type: `string` },\n                    state: stringEnum([`todo`, `in progress`, `done`]),\n                    dueDate: { type: `string` },\n                  },\n                  required: [`itemId`, `label`, `state`],\n                  additionalProperties: false,\n                },\n              },\n            },\n            required: [`TodoList`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`references`, () => {\n        const TodoItemState = z.enum([`todo`, `in progress`, `done`]);\n\n        const TodoItem = z.object({\n          id: z.number(),\n          label: z.string(),\n          state: TodoItemState,\n        });\n\n        const TodoList = z.array(TodoItem);\n\n        const schema = {\n          TodoItemState,\n          TodoItem,\n          TodoList,\n        };\n\n        const { schemas } = buildJsonSchemas(schema, { target });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              TodoItemState: {\n                type: `string`,\n                enum: [`todo`, `in progress`, `done`],\n              },\n              TodoItem: {\n                type: `object`,\n                properties: {\n                  id: { type: `number` },\n                  label: { type: `string` },\n                  state: { $ref: `Schema#/properties/TodoItemState` },\n                },\n                required: [`id`, `label`, `state`],\n                additionalProperties: false,\n              },\n              TodoList: {\n                type: `array`,\n                items: { $ref: `Schema#/properties/TodoItem` },\n              },\n            },\n            required: [`TodoItemState`, `TodoItem`, `TodoList`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n    });\n  }\n});\n"],"mappings":"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"}