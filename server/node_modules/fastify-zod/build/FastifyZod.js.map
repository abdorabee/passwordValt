{"version":3,"file":"FastifyZod.js","names":["withRefResolver","options","refResolver","clone","buildLocalReference","json","_baseUri","_fragment","i","$id","register","f","jsonSchemas","schemas","$ref","swaggerOptions","schema","addSchema","transformSpec","baseSwaggerOptions","fastifySwagger","originalRoutePrefix","routePrefix","transformedRoutePrefix","fetchTransformedSpec","originalSpec","inject","method","url","then","res","t","SpecTransformer","transform","cachedTransformedSpec","getTransformedSpec","cache","cachedTransformedSpecJson","getTransformedSpecJson","transformedSpec","JSON","stringify","cachedTransformedSpecYaml","getTransformedSpecYaml","yaml","dump","get","_request","reply","type","addRoute","operationId","params","body","querystring","handler","fastifySchema","undefined","response","createAddRoute","config","pluginInstance","delete","head","patch","post","put","decorate"],"sources":["../src/FastifyZod.ts"],"sourcesContent":["import {\n  FastifyInstance,\n  FastifyRequest,\n  FastifySchema,\n  HTTPMethods,\n} from \"fastify\";\nimport fastifySwagger, { FastifyDynamicSwaggerOptions } from \"@fastify/swagger\";\nimport * as yaml from \"js-yaml\";\n\nimport { SpecTransformer, TransformOptions } from \"./SpecTransformer\";\nimport { BuildJsonSchemasResult } from \"./JsonSchema\";\nimport {\n  Models,\n  SchemaKey,\n  SchemaKeyOrDescription,\n  SchemaTypeOption,\n} from \"./Models\";\n\nexport type RegisterOptions<S extends Models> = {\n  readonly jsonSchemas: BuildJsonSchemasResult<S>;\n  readonly swaggerOptions?: FastifyDynamicSwaggerOptions & {\n    readonly transformSpec?: {\n      readonly cache?: boolean;\n      readonly routePrefix?: string;\n      readonly options?: TransformOptions;\n    };\n  };\n};\ntype RouteHandlerParams<\n  M extends Models,\n  Params extends void | SchemaKey<M>,\n  Body extends void | SchemaKey<M>,\n  Querystring extends void | SchemaKey<M>,\n> = FastifyRequest<{\n  Params: SchemaTypeOption<M, Params>;\n  Body: SchemaTypeOption<M, Body>;\n  Querystring: SchemaTypeOption<M, Querystring>;\n}>;\n\ntype RouteHandler<\n  M extends Models,\n  Params extends void | SchemaKey<M>,\n  Body extends void | SchemaKey<M>,\n  Reply extends void | SchemaKey<M>,\n  Querystring extends void | SchemaKey<M>,\n> = (\n  params: RouteHandlerParams<M, Params, Body, Querystring>,\n) => Promise<SchemaTypeOption<M, Reply>>;\n\ntype RouteConfig<\n  M extends Models = Models,\n  Method extends Lowercase<HTTPMethods> = Lowercase<HTTPMethods>,\n  Params extends void | SchemaKey<M> = void,\n  Body extends void | SchemaKey<M> = void,\n  Reply extends void | SchemaKey<M> = void,\n  Querystring extends void | SchemaKey<M> = void,\n> = {\n  readonly url: string;\n  readonly method: Method;\n  readonly operationId: string;\n  readonly description?: string;\n  readonly params?:\n    | Exclude<Params, void>\n    | {\n        readonly description: string;\n        readonly key: Exclude<Params, void>;\n      };\n  readonly body?:\n    | Exclude<Body, void>\n    | {\n        readonly description: string;\n        readonly key: Exclude<Body, void>;\n      };\n  readonly reply?:\n    | Exclude<Reply, void>\n    | {\n        readonly description: string;\n        readonly key: Exclude<Reply, void>;\n      };\n  readonly querystring?:\n    | Exclude<Querystring, void>\n    | {\n        readonly description: string;\n        readonly key: Exclude<Querystring, void>;\n      };\n  readonly handler: RouteHandler<M, Params, Body, Reply, Querystring>;\n} & FastifySchema;\n\nexport type FastifyZod<M extends Models> = {\n  readonly [Method in Lowercase<HTTPMethods>]: <\n    Params extends void | SchemaKey<M> = void,\n    Body extends void | SchemaKey<M> = void,\n    Reply extends void | SchemaKey<M> = void,\n    Querystring extends void | SchemaKey<M> = void,\n  >(\n    url: string,\n    config: Omit<\n      RouteConfig<M, Method, Params, Body, Reply, Querystring>,\n      `url` | `method` | `schema` | `handler`\n    >,\n    handler: RouteHandler<M, Params, Body, Reply, Querystring>,\n  ) => void;\n};\n\nexport type FastifyZodInstance<M extends Models> = FastifyInstance & {\n  readonly zod: FastifyZod<M>;\n};\n\nexport const withRefResolver = (\n  options: FastifyDynamicSwaggerOptions,\n): FastifyDynamicSwaggerOptions => ({\n  ...options,\n  refResolver: {\n    ...options.refResolver,\n    clone: true,\n    buildLocalReference: (json, _baseUri, _fragment, i) =>\n      typeof json.$id === `string` ? json.$id : `def-${i}`,\n  },\n});\n\nexport const register = <S extends Models>(\n  f: FastifyInstance,\n  { jsonSchemas: { schemas, $ref }, swaggerOptions }: RegisterOptions<S>,\n): FastifyZodInstance<S> => {\n  for (const schema of schemas) {\n    f.addSchema(schema);\n  }\n\n  if (swaggerOptions) {\n    const { transformSpec, ...baseSwaggerOptions } = swaggerOptions;\n\n    f.register(fastifySwagger, withRefResolver(baseSwaggerOptions));\n\n    if (transformSpec) {\n      const originalRoutePrefix =\n        baseSwaggerOptions.routePrefix ?? `/documentation`;\n      const transformedRoutePrefix =\n        transformSpec.routePrefix ?? `${originalRoutePrefix}_transformed`;\n\n      const fetchTransformedSpec = async (): Promise<unknown> => {\n        const originalSpec = await f\n          .inject({\n            method: `get`,\n            url: `${baseSwaggerOptions.routePrefix ?? `documentation`}/json`,\n          })\n          .then((res) => res.json());\n        const t = new SpecTransformer(originalSpec);\n        return t.transform(transformSpec.options);\n      };\n\n      let cachedTransformedSpec: null | Promise<unknown> = null;\n      const getTransformedSpec = async (): Promise<unknown> => {\n        if (!transformSpec.cache) {\n          return await fetchTransformedSpec();\n        }\n        if (!cachedTransformedSpec) {\n          cachedTransformedSpec = fetchTransformedSpec();\n        }\n        return await cachedTransformedSpec;\n      };\n\n      let cachedTransformedSpecJson: null | string = null;\n      const getTransformedSpecJson = async (): Promise<string> => {\n        const transformedSpec = await getTransformedSpec();\n        if (!transformSpec.cache) {\n          return JSON.stringify(transformedSpec, null, 2);\n        }\n        if (!cachedTransformedSpecJson) {\n          cachedTransformedSpecJson = JSON.stringify(transformedSpec, null, 2);\n        }\n        return cachedTransformedSpecJson;\n      };\n\n      let cachedTransformedSpecYaml: null | string = null;\n      const getTransformedSpecYaml = async (): Promise<string> => {\n        const transformedSpec = await getTransformedSpec();\n        if (!transformSpec.cache) {\n          return yaml.dump(transformedSpec);\n        }\n        if (!cachedTransformedSpecYaml) {\n          cachedTransformedSpecYaml = yaml.dump(transformedSpec);\n        }\n        return cachedTransformedSpecYaml;\n      };\n\n      f.get(`${transformedRoutePrefix}/json`, async (_request, reply) => {\n        reply.type(`application/json`);\n        return await getTransformedSpecJson();\n      });\n\n      f.get(`${transformedRoutePrefix}/yaml`, async (_request, reply) => {\n        reply.type(`text/x-yaml`);\n        return await getTransformedSpecYaml();\n      });\n    }\n  }\n\n  const addRoute = <\n    M extends Lowercase<HTTPMethods> = Lowercase<HTTPMethods>,\n    Params extends void | SchemaKey<S> = void,\n    Body extends void | SchemaKey<S> = void,\n    Reply extends void | SchemaKey<S> = void,\n    Querystring extends void | SchemaKey<S> = void,\n  >({\n    method,\n    url,\n    operationId,\n    params,\n    body,\n    reply,\n    querystring,\n    handler,\n    ...fastifySchema\n  }: RouteConfig<S, M, Params, Body, Reply, Querystring>): void => {\n    f[method]<{\n      Params: SchemaTypeOption<S, Params>;\n      Body: SchemaTypeOption<S, Body>;\n      Reply: SchemaTypeOption<S, Reply>;\n      Querystring: SchemaTypeOption<S, Querystring>;\n    }>(\n      url,\n      {\n        schema: {\n          operationId,\n          params: params\n            ? $ref(params as SchemaKeyOrDescription<S>)\n            : undefined,\n          body: body ? $ref(body as SchemaKeyOrDescription<S>) : undefined,\n          querystring: querystring\n            ? $ref(querystring as SchemaKeyOrDescription<S>)\n            : undefined,\n          response: reply\n            ? {\n                200: $ref(reply as SchemaKeyOrDescription<S>),\n              }\n            : undefined,\n          ...fastifySchema,\n        },\n      },\n      handler,\n    );\n  };\n\n  const createAddRoute =\n    <M extends Lowercase<HTTPMethods>>(method: M): FastifyZod<S>[M] =>\n    (url, config, handler) =>\n      addRoute({ url, handler, method, ...config });\n\n  const pluginInstance: FastifyZod<S> = {\n    delete: createAddRoute(`delete`),\n    get: createAddRoute(`get`),\n    head: createAddRoute(`head`),\n    options: createAddRoute(`options`),\n    patch: createAddRoute(`patch`),\n    post: createAddRoute(`post`),\n    put: createAddRoute(`put`),\n  };\n\n  f.decorate(`zod`, pluginInstance);\n\n  return f as FastifyZodInstance<S>;\n};\n"],"mappings":"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"}